# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rundec')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rundec')
    _rundec = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rundec', [dirname(__file__)])
        except ImportError:
            import _rundec
            return _rundec
        if fp is not None:
            try:
                _mod = imp.load_module('_rundec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rundec = swig_import_helper()
    del swig_import_helper
else:
    import _rundec
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class RunDec_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunDec_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunDec_values, name)
    __repr__ = _swig_repr
    __swig_setmethods__["asMz"] = _rundec.RunDec_values_asMz_set
    __swig_getmethods__["asMz"] = _rundec.RunDec_values_asMz_get
    if _newclass:
        asMz = _swig_property(_rundec.RunDec_values_asMz_get, _rundec.RunDec_values_asMz_set)
    __swig_setmethods__["asMtau"] = _rundec.RunDec_values_asMtau_set
    __swig_getmethods__["asMtau"] = _rundec.RunDec_values_asMtau_get
    if _newclass:
        asMtau = _swig_property(_rundec.RunDec_values_asMtau_get, _rundec.RunDec_values_asMtau_set)
    __swig_setmethods__["Mz"] = _rundec.RunDec_values_Mz_set
    __swig_getmethods__["Mz"] = _rundec.RunDec_values_Mz_get
    if _newclass:
        Mz = _swig_property(_rundec.RunDec_values_Mz_get, _rundec.RunDec_values_Mz_set)
    __swig_setmethods__["Mh"] = _rundec.RunDec_values_Mh_set
    __swig_getmethods__["Mh"] = _rundec.RunDec_values_Mh_get
    if _newclass:
        Mh = _swig_property(_rundec.RunDec_values_Mh_get, _rundec.RunDec_values_Mh_set)
    __swig_setmethods__["muc"] = _rundec.RunDec_values_muc_set
    __swig_getmethods__["muc"] = _rundec.RunDec_values_muc_get
    if _newclass:
        muc = _swig_property(_rundec.RunDec_values_muc_get, _rundec.RunDec_values_muc_set)
    __swig_setmethods__["mc3"] = _rundec.RunDec_values_mc3_set
    __swig_getmethods__["mc3"] = _rundec.RunDec_values_mc3_get
    if _newclass:
        mc3 = _swig_property(_rundec.RunDec_values_mc3_get, _rundec.RunDec_values_mc3_set)
    __swig_setmethods__["mub"] = _rundec.RunDec_values_mub_set
    __swig_getmethods__["mub"] = _rundec.RunDec_values_mub_get
    if _newclass:
        mub = _swig_property(_rundec.RunDec_values_mub_get, _rundec.RunDec_values_mub_set)
    __swig_setmethods__["Mtau"] = _rundec.RunDec_values_Mtau_set
    __swig_getmethods__["Mtau"] = _rundec.RunDec_values_Mtau_get
    if _newclass:
        Mtau = _swig_property(_rundec.RunDec_values_Mtau_get, _rundec.RunDec_values_Mtau_set)
    __swig_setmethods__["Mc"] = _rundec.RunDec_values_Mc_set
    __swig_getmethods__["Mc"] = _rundec.RunDec_values_Mc_get
    if _newclass:
        Mc = _swig_property(_rundec.RunDec_values_Mc_get, _rundec.RunDec_values_Mc_set)
    __swig_setmethods__["Mb"] = _rundec.RunDec_values_Mb_set
    __swig_getmethods__["Mb"] = _rundec.RunDec_values_Mb_get
    if _newclass:
        Mb = _swig_property(_rundec.RunDec_values_Mb_get, _rundec.RunDec_values_Mb_set)
    __swig_setmethods__["Mt"] = _rundec.RunDec_values_Mt_set
    __swig_getmethods__["Mt"] = _rundec.RunDec_values_Mt_get
    if _newclass:
        Mt = _swig_property(_rundec.RunDec_values_Mt_get, _rundec.RunDec_values_Mt_set)

    def __init__(self):
        this = _rundec.new_RunDec_values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rundec.delete_RunDec_values
    __del__ = lambda self: None
RunDec_values_swigregister = _rundec.RunDec_values_swigregister
RunDec_values_swigregister(RunDec_values)

class TriplenfMmu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriplenfMmu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriplenfMmu, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nf"] = _rundec.TriplenfMmu_nf_set
    __swig_getmethods__["nf"] = _rundec.TriplenfMmu_nf_get
    if _newclass:
        nf = _swig_property(_rundec.TriplenfMmu_nf_get, _rundec.TriplenfMmu_nf_set)
    __swig_setmethods__["Mth"] = _rundec.TriplenfMmu_Mth_set
    __swig_getmethods__["Mth"] = _rundec.TriplenfMmu_Mth_get
    if _newclass:
        Mth = _swig_property(_rundec.TriplenfMmu_Mth_get, _rundec.TriplenfMmu_Mth_set)
    __swig_setmethods__["muth"] = _rundec.TriplenfMmu_muth_set
    __swig_getmethods__["muth"] = _rundec.TriplenfMmu_muth_get
    if _newclass:
        muth = _swig_property(_rundec.TriplenfMmu_muth_get, _rundec.TriplenfMmu_muth_set)

    def __init__(self):
        this = _rundec.new_TriplenfMmu()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rundec.delete_TriplenfMmu
    __del__ = lambda self: None
TriplenfMmu_swigregister = _rundec.TriplenfMmu_swigregister
TriplenfMmu_swigregister(TriplenfMmu)
cvar = _rundec.cvar

class AsmMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsmMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsmMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Asexact"] = _rundec.AsmMS_Asexact_set
    __swig_getmethods__["Asexact"] = _rundec.AsmMS_Asexact_get
    if _newclass:
        Asexact = _swig_property(_rundec.AsmMS_Asexact_get, _rundec.AsmMS_Asexact_set)
    __swig_setmethods__["mMSexact"] = _rundec.AsmMS_mMSexact_set
    __swig_getmethods__["mMSexact"] = _rundec.AsmMS_mMSexact_get
    if _newclass:
        mMSexact = _swig_property(_rundec.AsmMS_mMSexact_get, _rundec.AsmMS_mMSexact_set)

    def __init__(self):
        this = _rundec.new_AsmMS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rundec.delete_AsmMS
    __del__ = lambda self: None
AsmMS_swigregister = _rundec.AsmMS_swigregister
AsmMS_swigregister(AsmMS)

class CRunDec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRunDec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRunDec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rundec.new_CRunDec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mq"] = _rundec.CRunDec_mq_set
    __swig_getmethods__["mq"] = _rundec.CRunDec_mq_get
    if _newclass:
        mq = _swig_property(_rundec.CRunDec_mq_get, _rundec.CRunDec_mq_set)
    __swig_setmethods__["nfMmu"] = _rundec.CRunDec_nfMmu_set
    __swig_getmethods__["nfMmu"] = _rundec.CRunDec_nfMmu_get
    if _newclass:
        nfMmu = _swig_property(_rundec.CRunDec_nfMmu_get, _rundec.CRunDec_nfMmu_set)
    __swig_setmethods__["AM"] = _rundec.CRunDec_AM_set
    __swig_getmethods__["AM"] = _rundec.CRunDec_AM_get
    if _newclass:
        AM = _swig_property(_rundec.CRunDec_AM_get, _rundec.CRunDec_AM_set)

    def GetNf(self):
        return _rundec.CRunDec_GetNf(self)

    def SetNf(self, nf):
        return _rundec.CRunDec_SetNf(self, nf)

    def DecLambdaUp(self, lam, massth, nl, nloops):
        return _rundec.CRunDec_DecLambdaUp(self, lam, massth, nl, nloops)

    def DecLambdaDown(self, lam, massth, nl, nloops):
        return _rundec.CRunDec_DecLambdaDown(self, lam, massth, nl, nloops)

    def AlL2AlH(self, asl, mu1, decpar, mu2, nloops):
        return _rundec.CRunDec_AlL2AlH(self, asl, mu1, decpar, mu2, nloops)

    def AlH2AlL(self, ash, mu1, decpar, mu2, nloops):
        return _rundec.CRunDec_AlH2AlL(self, ash, mu1, decpar, mu2, nloops)

    def mL2mH(self, mql, asl, mu1, decpar, mu2, nloops):
        return _rundec.CRunDec_mL2mH(self, mql, asl, mu1, decpar, mu2, nloops)

    def mH2mL(self, mqh, ash, mu1, decpar, mu2, nloops):
        return _rundec.CRunDec_mH2mL(self, mqh, ash, mu1, decpar, mu2, nloops)

    def mOS2mPS(self, mOS, mq, asmu, mu, muf, nl, nloops):
        return _rundec.CRunDec_mOS2mPS(self, mOS, mq, asmu, mu, muf, nl, nloops)

    def mMS2mPS(self, mMS, mq, asmu, mu, muf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mMS2mPS(self, mMS, mq, asmu, mu, muf, nl, nloops, fdelm)

    def mPS2mMS(self, mPS, mq, asmu, mu, muf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mPS2mMS(self, mPS, mq, asmu, mu, muf, nl, nloops, fdelm)

    def mPS2mSI(self, mPS, mq, arg4, muf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mPS2mSI(self, mPS, mq, arg4, muf, nl, nloops, fdelm)

    def mOS2m1S(self, mOS, mq, asmu, mu, nl, nloops):
        return _rundec.CRunDec_mOS2m1S(self, mOS, mq, asmu, mu, nl, nloops)

    def mMS2m1S(self, mMS, mq, asmu, mu, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mMS2m1S(self, mMS, mq, asmu, mu, nl, nloops, fdelm)

    def m1S2mMS(self, m1S, mq, asmu, mu, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_m1S2mMS(self, m1S, mq, asmu, mu, nl, nloops, fdelm)

    def m1S2mSI(self, m1S, mq, arg4, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_m1S2mSI(self, m1S, mq, arg4, nl, nloops, fdelm)

    def mOS2mRS(self, *args):
        return _rundec.CRunDec_mOS2mRS(self, *args)

    def mMS2mRS(self, *args):
        return _rundec.CRunDec_mMS2mRS(self, *args)

    def mRS2mMS(self, *args):
        return _rundec.CRunDec_mRS2mMS(self, *args)

    def mRS2mSI(self, *args):
        return _rundec.CRunDec_mRS2mSI(self, *args)

    def mOS2mRSp(self, mOS, mq, asmu, mu, nuf, nl, nloops):
        return _rundec.CRunDec_mOS2mRSp(self, mOS, mq, asmu, mu, nuf, nl, nloops)

    def mMS2mRSp(self, mMS, mq, asmu, mu, nuf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mMS2mRSp(self, mMS, mq, asmu, mu, nuf, nl, nloops, fdelm)

    def mRSp2mMS(self, mRS, mq, asmu, mu, nuf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mRSp2mMS(self, mRS, mq, asmu, mu, nuf, nl, nloops, fdelm)

    def mRSp2mSI(self, mRS, mq, arg4, nuf, nl, nloops, fdelm=1.0):
        return _rundec.CRunDec_mRSp2mSI(self, mRS, mq, arg4, nuf, nl, nloops, fdelm)

    def LamExpl(self, *args):
        return _rundec.CRunDec_LamExpl(self, *args)

    def LamImpl(self, *args):
        return _rundec.CRunDec_LamImpl(self, *args)

    def AlphasLam(self, *args):
        return _rundec.CRunDec_AlphasLam(self, *args)

    def AlphasExact(self, *args):
        return _rundec.CRunDec_AlphasExact(self, *args)

    def mMS2mMS(self, *args):
        return _rundec.CRunDec_mMS2mMS(self, *args)

    def AsmMSrunexact(self, *args):
        return _rundec.CRunDec_AsmMSrunexact(self, *args)

    def DecAsDownOS(self, *args):
        return _rundec.CRunDec_DecAsDownOS(self, *args)

    def DecAsUpOS(self, *args):
        return _rundec.CRunDec_DecAsUpOS(self, *args)

    def DecAsDownMS(self, *args):
        return _rundec.CRunDec_DecAsDownMS(self, *args)

    def DecAsUpMS(self, *args):
        return _rundec.CRunDec_DecAsUpMS(self, *args)

    def DecAsDownSI(self, *args):
        return _rundec.CRunDec_DecAsDownSI(self, *args)

    def DecAsUpSI(self, *args):
        return _rundec.CRunDec_DecAsUpSI(self, *args)

    def DecMqUpOS(self, *args):
        return _rundec.CRunDec_DecMqUpOS(self, *args)

    def DecMqDownOS(self, *args):
        return _rundec.CRunDec_DecMqDownOS(self, *args)

    def DecMqUpMS(self, *args):
        return _rundec.CRunDec_DecMqUpMS(self, *args)

    def DecMqDownMS(self, *args):
        return _rundec.CRunDec_DecMqDownMS(self, *args)

    def DecMqUpSI(self, *args):
        return _rundec.CRunDec_DecMqUpSI(self, *args)

    def DecMqDownSI(self, *args):
        return _rundec.CRunDec_DecMqDownSI(self, *args)

    def mMS2mOS(self, *args):
        return _rundec.CRunDec_mMS2mOS(self, *args)

    def mOS2mMS(self, *args):
        return _rundec.CRunDec_mOS2mMS(self, *args)

    def mMS2mSI(self, *args):
        return _rundec.CRunDec_mMS2mSI(self, *args)

    def mRI2mMS(self, *args):
        return _rundec.CRunDec_mRI2mMS(self, *args)

    def mMS2mRGI(self, *args):
        return _rundec.CRunDec_mMS2mRGI(self, *args)

    def mRGI2mMS(self, *args):
        return _rundec.CRunDec_mRGI2mMS(self, *args)

    def mOS2mSI(self, *args):
        return _rundec.CRunDec_mOS2mSI(self, *args)

    def mOS2mMSrun(self, *args):
        return _rundec.CRunDec_mOS2mMSrun(self, *args)

    def mMS2mOSrun(self, *args):
        return _rundec.CRunDec_mMS2mOSrun(self, *args)

    def mMS2mRI(self, *args):
        return _rundec.CRunDec_mMS2mRI(self, *args)

    def mOS2mMSit(self, *args):
        return _rundec.CRunDec_mOS2mMSit(self, *args)

    def mMS2mRGImod(self, *args):
        return _rundec.CRunDec_mMS2mRGImod(self, *args)
    __swig_destroy__ = _rundec.delete_CRunDec
    __del__ = lambda self: None
CRunDec_swigregister = _rundec.CRunDec_swigregister
CRunDec_swigregister(CRunDec)

def fSetdydx(S, A, nl):
    return _rundec.fSetdydx(S, A, nl)
fSetdydx = _rundec.fSetdydx

def fSetdydxa1(S, x, A):
    return _rundec.fSetdydxa1(S, x, A)
fSetdydxa1 = _rundec.fSetdydxa1

def fSetdydxM1(S, A, M):
    return _rundec.fSetdydxM1(S, A, M)
fSetdydxM1 = _rundec.fSetdydxM1

def fSetdydxa2(S, x, A):
    return _rundec.fSetdydxa2(S, x, A)
fSetdydxa2 = _rundec.fSetdydxa2

def fSetdydxM2(S, A, M):
    return _rundec.fSetdydxM2(S, A, M)
fSetdydxM2 = _rundec.fSetdydxM2

def fSetdydxa3(S, x, A):
    return _rundec.fSetdydxa3(S, x, A)
fSetdydxa3 = _rundec.fSetdydxa3

def fSetdydxM3(S, A, M):
    return _rundec.fSetdydxM3(S, A, M)
fSetdydxM3 = _rundec.fSetdydxM3

def fSetdydxa4(S, x, A):
    return _rundec.fSetdydxa4(S, x, A)
fSetdydxa4 = _rundec.fSetdydxa4

def fSetdydxM4(S, A, M):
    return _rundec.fSetdydxM4(S, A, M)
fSetdydxM4 = _rundec.fSetdydxM4

def fSetdydxa5(S, x, A):
    return _rundec.fSetdydxa5(S, x, A)
fSetdydxa5 = _rundec.fSetdydxa5

def fSetdydxM5(S, A, M):
    return _rundec.fSetdydxM5(S, A, M)
fSetdydxM5 = _rundec.fSetdydxM5

# This file is compatible with both classic and new-style classes.


